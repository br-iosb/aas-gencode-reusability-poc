/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AAS.OpenApi.Client.Client;
using AAS.OpenApi.Client.Model;

namespace AAS.OpenApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IConceptDescriptionRepositoryInterfaceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void DeleteConceptDescriptionById (string cdIdentifier);

        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConceptDescriptionByIdWithHttpInfo (string cdIdentifier);
        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>List&lt;ConceptDescription&gt;</returns>
        List<ConceptDescription> GetAllConceptDescriptions (string idShort = null, string isCaseOf = null, string dataSpecificationRef = null);

        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>ApiResponse of List&lt;ConceptDescription&gt;</returns>
        ApiResponse<List<ConceptDescription>> GetAllConceptDescriptionsWithHttpInfo (string idShort = null, string isCaseOf = null, string dataSpecificationRef = null);
        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ConceptDescription</returns>
        ConceptDescription GetConceptDescriptionById (string cdIdentifier);

        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of ConceptDescription</returns>
        ApiResponse<ConceptDescription> GetConceptDescriptionByIdWithHttpInfo (string cdIdentifier);
        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>ConceptDescription</returns>
        ConceptDescription PostConceptDescription (ConceptDescription body);

        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>ApiResponse of ConceptDescription</returns>
        ApiResponse<ConceptDescription> PostConceptDescriptionWithHttpInfo (ConceptDescription body);
        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void PutConceptDescriptionById (ConceptDescription body, string cdIdentifier);

        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutConceptDescriptionByIdWithHttpInfo (ConceptDescription body, string cdIdentifier);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConceptDescriptionByIdAsync (string cdIdentifier);

        /// <summary>
        /// Deletes a Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConceptDescriptionByIdAsyncWithHttpInfo (string cdIdentifier);
        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of List&lt;ConceptDescription&gt;</returns>
        System.Threading.Tasks.Task<List<ConceptDescription>> GetAllConceptDescriptionsAsync (string idShort = null, string isCaseOf = null, string dataSpecificationRef = null);

        /// <summary>
        /// Returns all Concept Descriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ConceptDescription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConceptDescription>>> GetAllConceptDescriptionsAsyncWithHttpInfo (string idShort = null, string isCaseOf = null, string dataSpecificationRef = null);
        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ConceptDescription</returns>
        System.Threading.Tasks.Task<ConceptDescription> GetConceptDescriptionByIdAsync (string cdIdentifier);

        /// <summary>
        /// Returns a specific Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (ConceptDescription)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConceptDescription>> GetConceptDescriptionByIdAsyncWithHttpInfo (string cdIdentifier);
        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>Task of ConceptDescription</returns>
        System.Threading.Tasks.Task<ConceptDescription> PostConceptDescriptionAsync (ConceptDescription body);

        /// <summary>
        /// Creates a new Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>Task of ApiResponse (ConceptDescription)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConceptDescription>> PostConceptDescriptionAsyncWithHttpInfo (ConceptDescription body);
        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutConceptDescriptionByIdAsync (ConceptDescription body, string cdIdentifier);

        /// <summary>
        /// Updates an existing Concept Description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutConceptDescriptionByIdAsyncWithHttpInfo (ConceptDescription body, string cdIdentifier);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ConceptDescriptionRepositoryInterfaceApi : IConceptDescriptionRepositoryInterfaceApi
    {
        private AAS.OpenApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConceptDescriptionRepositoryInterfaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConceptDescriptionRepositoryInterfaceApi(String basePath)
        {
            this.Configuration = new AAS.OpenApi.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AAS.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConceptDescriptionRepositoryInterfaceApi"/> class
        /// </summary>
        /// <returns></returns>
        public ConceptDescriptionRepositoryInterfaceApi()
        {
            this.Configuration = AAS.OpenApi.Client.Client.Configuration.Default;

            ExceptionFactory = AAS.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConceptDescriptionRepositoryInterfaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConceptDescriptionRepositoryInterfaceApi(AAS.OpenApi.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AAS.OpenApi.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AAS.OpenApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AAS.OpenApi.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AAS.OpenApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void DeleteConceptDescriptionById (string cdIdentifier)
        {
             DeleteConceptDescriptionByIdWithHttpInfo(cdIdentifier);
        }

        /// <summary>
        /// Deletes a Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteConceptDescriptionByIdWithHttpInfo (string cdIdentifier)
        {
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling ConceptDescriptionRepositoryInterfaceApi->DeleteConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConceptDescriptionByIdAsync (string cdIdentifier)
        {
             await DeleteConceptDescriptionByIdAsyncWithHttpInfo(cdIdentifier);

        }

        /// <summary>
        /// Deletes a Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConceptDescriptionByIdAsyncWithHttpInfo (string cdIdentifier)
        {
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling ConceptDescriptionRepositoryInterfaceApi->DeleteConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns all Concept Descriptions 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>List&lt;ConceptDescription&gt;</returns>
        public List<ConceptDescription> GetAllConceptDescriptions (string idShort = null, string isCaseOf = null, string dataSpecificationRef = null)
        {
             ApiResponse<List<ConceptDescription>> localVarResponse = GetAllConceptDescriptionsWithHttpInfo(idShort, isCaseOf, dataSpecificationRef);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Concept Descriptions 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>ApiResponse of List&lt;ConceptDescription&gt;</returns>
        public ApiResponse< List<ConceptDescription> > GetAllConceptDescriptionsWithHttpInfo (string idShort = null, string isCaseOf = null, string dataSpecificationRef = null)
        {

            var localVarPath = "/concept-descriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idShort", idShort)); // query parameter
            if (isCaseOf != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isCaseOf", isCaseOf)); // query parameter
            if (dataSpecificationRef != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataSpecificationRef", dataSpecificationRef)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllConceptDescriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConceptDescription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ConceptDescription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConceptDescription>)));
        }

        /// <summary>
        /// Returns all Concept Descriptions 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of List&lt;ConceptDescription&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConceptDescription>> GetAllConceptDescriptionsAsync (string idShort = null, string isCaseOf = null, string dataSpecificationRef = null)
        {
             ApiResponse<List<ConceptDescription>> localVarResponse = await GetAllConceptDescriptionsAsyncWithHttpInfo(idShort, isCaseOf, dataSpecificationRef);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all Concept Descriptions 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShort">The Concept Description’s IdShort (optional)</param>
        /// <param name="isCaseOf">IsCaseOf reference (BASE64-URL-encoded) (optional)</param>
        /// <param name="dataSpecificationRef">DataSpecification reference (BASE64-URL-encoded) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ConceptDescription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ConceptDescription>>> GetAllConceptDescriptionsAsyncWithHttpInfo (string idShort = null, string isCaseOf = null, string dataSpecificationRef = null)
        {

            var localVarPath = "/concept-descriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idShort", idShort)); // query parameter
            if (isCaseOf != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isCaseOf", isCaseOf)); // query parameter
            if (dataSpecificationRef != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataSpecificationRef", dataSpecificationRef)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllConceptDescriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConceptDescription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ConceptDescription>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConceptDescription>)));
        }

        /// <summary>
        /// Returns a specific Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ConceptDescription</returns>
        public ConceptDescription GetConceptDescriptionById (string cdIdentifier)
        {
             ApiResponse<ConceptDescription> localVarResponse = GetConceptDescriptionByIdWithHttpInfo(cdIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of ConceptDescription</returns>
        public ApiResponse< ConceptDescription > GetConceptDescriptionByIdWithHttpInfo (string cdIdentifier)
        {
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling ConceptDescriptionRepositoryInterfaceApi->GetConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConceptDescription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConceptDescription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConceptDescription)));
        }

        /// <summary>
        /// Returns a specific Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ConceptDescription</returns>
        public async System.Threading.Tasks.Task<ConceptDescription> GetConceptDescriptionByIdAsync (string cdIdentifier)
        {
             ApiResponse<ConceptDescription> localVarResponse = await GetConceptDescriptionByIdAsyncWithHttpInfo(cdIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a specific Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (ConceptDescription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConceptDescription>> GetConceptDescriptionByIdAsyncWithHttpInfo (string cdIdentifier)
        {
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling ConceptDescriptionRepositoryInterfaceApi->GetConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConceptDescription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConceptDescription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConceptDescription)));
        }

        /// <summary>
        /// Creates a new Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>ConceptDescription</returns>
        public ConceptDescription PostConceptDescription (ConceptDescription body)
        {
             ApiResponse<ConceptDescription> localVarResponse = PostConceptDescriptionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>ApiResponse of ConceptDescription</returns>
        public ApiResponse< ConceptDescription > PostConceptDescriptionWithHttpInfo (ConceptDescription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConceptDescriptionRepositoryInterfaceApi->PostConceptDescription");

            var localVarPath = "/concept-descriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConceptDescription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConceptDescription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConceptDescription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConceptDescription)));
        }

        /// <summary>
        /// Creates a new Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>Task of ConceptDescription</returns>
        public async System.Threading.Tasks.Task<ConceptDescription> PostConceptDescriptionAsync (ConceptDescription body)
        {
             ApiResponse<ConceptDescription> localVarResponse = await PostConceptDescriptionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <returns>Task of ApiResponse (ConceptDescription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConceptDescription>> PostConceptDescriptionAsyncWithHttpInfo (ConceptDescription body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConceptDescriptionRepositoryInterfaceApi->PostConceptDescription");

            var localVarPath = "/concept-descriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostConceptDescription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConceptDescription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConceptDescription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConceptDescription)));
        }

        /// <summary>
        /// Updates an existing Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void PutConceptDescriptionById (ConceptDescription body, string cdIdentifier)
        {
             PutConceptDescriptionByIdWithHttpInfo(body, cdIdentifier);
        }

        /// <summary>
        /// Updates an existing Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutConceptDescriptionByIdWithHttpInfo (ConceptDescription body, string cdIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConceptDescriptionRepositoryInterfaceApi->PutConceptDescriptionById");
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling ConceptDescriptionRepositoryInterfaceApi->PutConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutConceptDescriptionByIdAsync (ConceptDescription body, string cdIdentifier)
        {
             await PutConceptDescriptionByIdAsyncWithHttpInfo(body, cdIdentifier);

        }

        /// <summary>
        /// Updates an existing Concept Description 
        /// </summary>
        /// <exception cref="AAS.OpenApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Concept Description object</param>
        /// <param name="cdIdentifier">The Concept Description’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutConceptDescriptionByIdAsyncWithHttpInfo (ConceptDescription body, string cdIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConceptDescriptionRepositoryInterfaceApi->PutConceptDescriptionById");
            // verify the required parameter 'cdIdentifier' is set
            if (cdIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'cdIdentifier' when calling ConceptDescriptionRepositoryInterfaceApi->PutConceptDescriptionById");

            var localVarPath = "/concept-descriptions/{cdIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cdIdentifier != null) localVarPathParams.Add("cdIdentifier", this.Configuration.ApiClient.ParameterToString(cdIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutConceptDescriptionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
