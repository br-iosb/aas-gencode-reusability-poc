/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AssetAdministrationShellRegistryInterfaceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AssetAdministrationShellRegistryInterfaceApiTests
    {
        private AssetAdministrationShellRegistryInterfaceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AssetAdministrationShellRegistryInterfaceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AssetAdministrationShellRegistryInterfaceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AssetAdministrationShellRegistryInterfaceApi
            //Assert.IsInstanceOfType(typeof(AssetAdministrationShellRegistryInterfaceApi), instance, "instance is a AssetAdministrationShellRegistryInterfaceApi");
        }

        /// <summary>
        /// Test DeleteAssetAdministrationShellDescriptorById
        /// </summary>
        [Test]
        public void DeleteAssetAdministrationShellDescriptorByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aasIdentifier = null;
            //instance.DeleteAssetAdministrationShellDescriptorById(aasIdentifier);
            
        }
        /// <summary>
        /// Test DeleteSubmodelDescriptorByIdAASRegistry
        /// </summary>
        [Test]
        public void DeleteSubmodelDescriptorByIdAASRegistryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aasIdentifier = null;
            //string submodelIdentifier = null;
            //instance.DeleteSubmodelDescriptorByIdAASRegistry(aasIdentifier, submodelIdentifier);
            
        }
        /// <summary>
        /// Test GetAllAssetAdministrationShellDescriptors
        /// </summary>
        [Test]
        public void GetAllAssetAdministrationShellDescriptorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllAssetAdministrationShellDescriptors();
            //Assert.IsInstanceOf<List<AssetAdministrationShellDescriptor>> (response, "response is List<AssetAdministrationShellDescriptor>");
        }
        /// <summary>
        /// Test GetAllSubmodelDescriptorsAASRegistry
        /// </summary>
        [Test]
        public void GetAllSubmodelDescriptorsAASRegistryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aasIdentifier = null;
            //var response = instance.GetAllSubmodelDescriptorsAASRegistry(aasIdentifier);
            //Assert.IsInstanceOf<List<SubmodelDescriptor>> (response, "response is List<SubmodelDescriptor>");
        }
        /// <summary>
        /// Test GetAssetAdministrationShellDescriptorById
        /// </summary>
        [Test]
        public void GetAssetAdministrationShellDescriptorByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aasIdentifier = null;
            //var response = instance.GetAssetAdministrationShellDescriptorById(aasIdentifier);
            //Assert.IsInstanceOf<AssetAdministrationShellDescriptor> (response, "response is AssetAdministrationShellDescriptor");
        }
        /// <summary>
        /// Test GetSubmodelDescriptorByIdAASRegistry
        /// </summary>
        [Test]
        public void GetSubmodelDescriptorByIdAASRegistryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aasIdentifier = null;
            //string submodelIdentifier = null;
            //var response = instance.GetSubmodelDescriptorByIdAASRegistry(aasIdentifier, submodelIdentifier);
            //Assert.IsInstanceOf<SubmodelDescriptor> (response, "response is SubmodelDescriptor");
        }
        /// <summary>
        /// Test PostAssetAdministrationShellDescriptor
        /// </summary>
        [Test]
        public void PostAssetAdministrationShellDescriptorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetAdministrationShellDescriptor body = null;
            //var response = instance.PostAssetAdministrationShellDescriptor(body);
            //Assert.IsInstanceOf<AssetAdministrationShellDescriptor> (response, "response is AssetAdministrationShellDescriptor");
        }
        /// <summary>
        /// Test PostSubmodelDescriptorAASRegistry
        /// </summary>
        [Test]
        public void PostSubmodelDescriptorAASRegistryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmodelDescriptor body = null;
            //string aasIdentifier = null;
            //var response = instance.PostSubmodelDescriptorAASRegistry(body, aasIdentifier);
            //Assert.IsInstanceOf<SubmodelDescriptor> (response, "response is SubmodelDescriptor");
        }
        /// <summary>
        /// Test PutAssetAdministrationShellDescriptorById
        /// </summary>
        [Test]
        public void PutAssetAdministrationShellDescriptorByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetAdministrationShellDescriptor body = null;
            //string aasIdentifier = null;
            //instance.PutAssetAdministrationShellDescriptorById(body, aasIdentifier);
            
        }
        /// <summary>
        /// Test PutSubmodelDescriptorByIdAASRegistry
        /// </summary>
        [Test]
        public void PutSubmodelDescriptorByIdAASRegistryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmodelDescriptor body = null;
            //string aasIdentifier = null;
            //string submodelIdentifier = null;
            //instance.PutSubmodelDescriptorByIdAASRegistry(body, aasIdentifier, submodelIdentifier);
            
        }
    }

}
