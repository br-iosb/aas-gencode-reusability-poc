/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SubmodelRepositoryInterfaceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubmodelRepositoryInterfaceApiTests
    {
        private SubmodelRepositoryInterfaceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubmodelRepositoryInterfaceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubmodelRepositoryInterfaceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubmodelRepositoryInterfaceApi
            //Assert.IsInstanceOfType(typeof(SubmodelRepositoryInterfaceApi), instance, "instance is a SubmodelRepositoryInterfaceApi");
        }

        /// <summary>
        /// Test DeleteSubmodelById
        /// </summary>
        [Test]
        public void DeleteSubmodelByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submodelIdentifier = null;
            //instance.DeleteSubmodelById(submodelIdentifier);
            
        }
        /// <summary>
        /// Test GetAllSubmodels
        /// </summary>
        [Test]
        public void GetAllSubmodelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string semanticId = null;
            //string idShort = null;
            //var response = instance.GetAllSubmodels(semanticId, idShort);
            //Assert.IsInstanceOf<List<Submodel>> (response, "response is List<Submodel>");
        }
        /// <summary>
        /// Test GetSubmodelById
        /// </summary>
        [Test]
        public void GetSubmodelByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submodelIdentifier = null;
            //var response = instance.GetSubmodelById(submodelIdentifier);
            //Assert.IsInstanceOf<Submodel> (response, "response is Submodel");
        }
        /// <summary>
        /// Test PostSubmodel
        /// </summary>
        [Test]
        public void PostSubmodelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Submodel body = null;
            //var response = instance.PostSubmodel(body);
            //Assert.IsInstanceOf<Submodel> (response, "response is Submodel");
        }
        /// <summary>
        /// Test PutSubmodelById
        /// </summary>
        [Test]
        public void PutSubmodelByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Submodel body = null;
            //string submodelIdentifier = null;
            //var response = instance.PutSubmodelById(body, submodelIdentifier);
            //Assert.IsInstanceOf<Submodel> (response, "response is Submodel");
        }
    }

}
