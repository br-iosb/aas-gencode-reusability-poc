/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SubmodelInterfaceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubmodelInterfaceApiTests
    {
        private SubmodelInterfaceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubmodelInterfaceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubmodelInterfaceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubmodelInterfaceApi
            //Assert.IsInstanceOfType(typeof(SubmodelInterfaceApi), instance, "instance is a SubmodelInterfaceApi");
        }

        /// <summary>
        /// Test DeleteSubmodelElementByPath
        /// </summary>
        [Test]
        public void DeleteSubmodelElementByPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idShortPath = null;
            //instance.DeleteSubmodelElementByPath(idShortPath);
            
        }
        /// <summary>
        /// Test GetAllSubmodelElements
        /// </summary>
        [Test]
        public void GetAllSubmodelElementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string level = null;
            //string content = null;
            //string extent = null;
            //var response = instance.GetAllSubmodelElements(level, content, extent);
            //Assert.IsInstanceOf<List<SubmodelElement>> (response, "response is List<SubmodelElement>");
        }
        /// <summary>
        /// Test GetOperationAsyncResult
        /// </summary>
        [Test]
        public void GetOperationAsyncResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idShortPath = null;
            //string handleId = null;
            //string content = null;
            //var response = instance.GetOperationAsyncResult(idShortPath, handleId, content);
            //Assert.IsInstanceOf<OperationResult> (response, "response is OperationResult");
        }
        /// <summary>
        /// Test GetSubmodel
        /// </summary>
        [Test]
        public void GetSubmodelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string level = null;
            //string content = null;
            //string extent = null;
            //var response = instance.GetSubmodel(level, content, extent);
            //Assert.IsInstanceOf<Submodel> (response, "response is Submodel");
        }
        /// <summary>
        /// Test GetSubmodelElementByPath
        /// </summary>
        [Test]
        public void GetSubmodelElementByPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idShortPath = null;
            //string level = null;
            //string content = null;
            //string extent = null;
            //var response = instance.GetSubmodelElementByPath(idShortPath, level, content, extent);
            //Assert.IsInstanceOf<SubmodelElement> (response, "response is SubmodelElement");
        }
        /// <summary>
        /// Test InvokeOperation
        /// </summary>
        [Test]
        public void InvokeOperationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OperationRequest body = null;
            //string idShortPath = null;
            //bool? async = null;
            //string content = null;
            //var response = instance.InvokeOperation(body, idShortPath, async, content);
            //Assert.IsInstanceOf<OperationResult> (response, "response is OperationResult");
        }
        /// <summary>
        /// Test PostSubmodelElement
        /// </summary>
        [Test]
        public void PostSubmodelElementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmodelElement body = null;
            //string level = null;
            //string content = null;
            //string extent = null;
            //var response = instance.PostSubmodelElement(body, level, content, extent);
            //Assert.IsInstanceOf<SubmodelElement> (response, "response is SubmodelElement");
        }
        /// <summary>
        /// Test PostSubmodelElementByPath
        /// </summary>
        [Test]
        public void PostSubmodelElementByPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmodelElement body = null;
            //string idShortPath = null;
            //string level = null;
            //string content = null;
            //string extent = null;
            //var response = instance.PostSubmodelElementByPath(body, idShortPath, level, content, extent);
            //Assert.IsInstanceOf<SubmodelElement> (response, "response is SubmodelElement");
        }
        /// <summary>
        /// Test PutSubmodel
        /// </summary>
        [Test]
        public void PutSubmodelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Submodel body = null;
            //string level = null;
            //string content = null;
            //string extent = null;
            //instance.PutSubmodel(body, level, content, extent);
            
        }
        /// <summary>
        /// Test PutSubmodelElementByPath
        /// </summary>
        [Test]
        public void PutSubmodelElementByPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmodelElement body = null;
            //string idShortPath = null;
            //string level = null;
            //string content = null;
            //string extent = null;
            //instance.PutSubmodelElementByPath(body, idShortPath, level, content, extent);
            
        }
    }

}
