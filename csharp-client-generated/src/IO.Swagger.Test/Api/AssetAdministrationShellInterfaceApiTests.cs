/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AssetAdministrationShellInterfaceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AssetAdministrationShellInterfaceApiTests
    {
        private AssetAdministrationShellInterfaceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AssetAdministrationShellInterfaceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AssetAdministrationShellInterfaceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AssetAdministrationShellInterfaceApi
            //Assert.IsInstanceOfType(typeof(AssetAdministrationShellInterfaceApi), instance, "instance is a AssetAdministrationShellInterfaceApi");
        }

        /// <summary>
        /// Test DeleteSubmodelReferenceById
        /// </summary>
        [Test]
        public void DeleteSubmodelReferenceByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string submodelIdentifier = null;
            //instance.DeleteSubmodelReferenceById(submodelIdentifier);
            
        }
        /// <summary>
        /// Test GetAllSubmodelReferences
        /// </summary>
        [Test]
        public void GetAllSubmodelReferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAllSubmodelReferences();
            //Assert.IsInstanceOf<List<Reference>> (response, "response is List<Reference>");
        }
        /// <summary>
        /// Test GetAssetAdministrationShell
        /// </summary>
        [Test]
        public void GetAssetAdministrationShellTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string content = null;
            //var response = instance.GetAssetAdministrationShell(content);
            //Assert.IsInstanceOf<AssetAdministrationShell> (response, "response is AssetAdministrationShell");
        }
        /// <summary>
        /// Test GetAssetInformation
        /// </summary>
        [Test]
        public void GetAssetInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAssetInformation();
            //Assert.IsInstanceOf<AssetInformation> (response, "response is AssetInformation");
        }
        /// <summary>
        /// Test PostSubmodelReference
        /// </summary>
        [Test]
        public void PostSubmodelReferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Reference body = null;
            //var response = instance.PostSubmodelReference(body);
            //Assert.IsInstanceOf<Reference> (response, "response is Reference");
        }
        /// <summary>
        /// Test PutAssetAdministrationShell
        /// </summary>
        [Test]
        public void PutAssetAdministrationShellTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetAdministrationShell body = null;
            //string content = null;
            //instance.PutAssetAdministrationShell(body, content);
            
        }
        /// <summary>
        /// Test PutAssetInformation
        /// </summary>
        [Test]
        public void PutAssetInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetInformation body = null;
            //instance.PutAssetInformation(body);
            
        }
    }

}
