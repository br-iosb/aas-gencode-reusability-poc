/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AssetAdministrationShellRepositoryInterfaceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AssetAdministrationShellRepositoryInterfaceApiTests
    {
        private AssetAdministrationShellRepositoryInterfaceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AssetAdministrationShellRepositoryInterfaceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AssetAdministrationShellRepositoryInterfaceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AssetAdministrationShellRepositoryInterfaceApi
            //Assert.IsInstanceOfType(typeof(AssetAdministrationShellRepositoryInterfaceApi), instance, "instance is a AssetAdministrationShellRepositoryInterfaceApi");
        }

        /// <summary>
        /// Test DeleteAssetAdministrationShellById
        /// </summary>
        [Test]
        public void DeleteAssetAdministrationShellByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aasIdentifier = null;
            //instance.DeleteAssetAdministrationShellById(aasIdentifier);
            
        }
        /// <summary>
        /// Test GetAllAssetAdministrationShells
        /// </summary>
        [Test]
        public void GetAllAssetAdministrationShellsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<IdentifierKeyValuePair> assetIds = null;
            //string idShort = null;
            //var response = instance.GetAllAssetAdministrationShells(assetIds, idShort);
            //Assert.IsInstanceOf<List<AssetAdministrationShell>> (response, "response is List<AssetAdministrationShell>");
        }
        /// <summary>
        /// Test GetAssetAdministrationShellById
        /// </summary>
        [Test]
        public void GetAssetAdministrationShellByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string aasIdentifier = null;
            //var response = instance.GetAssetAdministrationShellById(aasIdentifier);
            //Assert.IsInstanceOf<AssetAdministrationShell> (response, "response is AssetAdministrationShell");
        }
        /// <summary>
        /// Test PostAssetAdministrationShell
        /// </summary>
        [Test]
        public void PostAssetAdministrationShellTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetAdministrationShell body = null;
            //var response = instance.PostAssetAdministrationShell(body);
            //Assert.IsInstanceOf<AssetAdministrationShell> (response, "response is AssetAdministrationShell");
        }
        /// <summary>
        /// Test PutAssetAdministrationShellById
        /// </summary>
        [Test]
        public void PutAssetAdministrationShellByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssetAdministrationShell body = null;
            //string aasIdentifier = null;
            //instance.PutAssetAdministrationShellById(body, aasIdentifier);
            
        }
    }

}
