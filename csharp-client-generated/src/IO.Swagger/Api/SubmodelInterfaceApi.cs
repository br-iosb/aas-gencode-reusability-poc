/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISubmodelInterfaceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns></returns>
        void DeleteSubmodelElementByPath (string idShortPath);

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubmodelElementByPathWithHttpInfo (string idShortPath);
        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>List&lt;SubmodelElement&gt;</returns>
        List<SubmodelElement> GetAllSubmodelElements (string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of List&lt;SubmodelElement&gt;</returns>
        ApiResponse<List<SubmodelElement>> GetAllSubmodelElementsWithHttpInfo (string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        OperationResult GetOperationAsyncResult (string idShortPath, string handleId, string content = null);

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        ApiResponse<OperationResult> GetOperationAsyncResultWithHttpInfo (string idShortPath, string handleId, string content = null);
        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Submodel</returns>
        Submodel GetSubmodel (string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Submodel</returns>
        ApiResponse<Submodel> GetSubmodelWithHttpInfo (string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        SubmodelElement GetSubmodelElementByPath (string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        ApiResponse<SubmodelElement> GetSubmodelElementByPathWithHttpInfo (string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        OperationResult InvokeOperation (OperationRequest body, string idShortPath, bool? async = null, string content = null);

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        ApiResponse<OperationResult> InvokeOperationWithHttpInfo (OperationRequest body, string idShortPath, bool? async = null, string content = null);
        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        SubmodelElement PostSubmodelElement (SubmodelElement body, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        ApiResponse<SubmodelElement> PostSubmodelElementWithHttpInfo (SubmodelElement body, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        SubmodelElement PostSubmodelElementByPath (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        ApiResponse<SubmodelElement> PostSubmodelElementByPathWithHttpInfo (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        void PutSubmodel (Submodel body, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutSubmodelWithHttpInfo (Submodel body, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        void PutSubmodelElementByPath (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutSubmodelElementByPathWithHttpInfo (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubmodelElementByPathAsync (string idShortPath);

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelElementByPathAsyncWithHttpInfo (string idShortPath);
        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of List&lt;SubmodelElement&gt;</returns>
        System.Threading.Tasks.Task<List<SubmodelElement>> GetAllSubmodelElementsAsync (string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns all submodel elements including their hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubmodelElement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SubmodelElement>>> GetAllSubmodelElementsAsyncWithHttpInfo (string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        System.Threading.Tasks.Task<OperationResult> GetOperationAsyncResultAsync (string idShortPath, string handleId, string content = null);

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResult>> GetOperationAsyncResultAsyncWithHttpInfo (string idShortPath, string handleId, string content = null);
        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of Submodel</returns>
        System.Threading.Tasks.Task<Submodel> GetSubmodelAsync (string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (Submodel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Submodel>> GetSubmodelAsyncWithHttpInfo (string level = null, string content = null, string extent = null);
        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        System.Threading.Tasks.Task<SubmodelElement> GetSubmodelElementByPathAsync (string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> GetSubmodelElementByPathAsyncWithHttpInfo (string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        System.Threading.Tasks.Task<OperationResult> InvokeOperationAsync (OperationRequest body, string idShortPath, bool? async = null, string content = null);

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResult>> InvokeOperationAsyncWithHttpInfo (OperationRequest body, string idShortPath, bool? async = null, string content = null);
        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementAsync (SubmodelElement body, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementAsyncWithHttpInfo (SubmodelElement body, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementByPathAsync (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementByPathAsyncWithHttpInfo (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutSubmodelAsync (Submodel body, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates the Submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelAsyncWithHttpInfo (Submodel body, string level = null, string content = null, string extent = null);
        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutSubmodelElementByPathAsync (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null);

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelElementByPathAsyncWithHttpInfo (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SubmodelInterfaceApi : ISubmodelInterfaceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelInterfaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubmodelInterfaceApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelInterfaceApi"/> class
        /// </summary>
        /// <returns></returns>
        public SubmodelInterfaceApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmodelInterfaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubmodelInterfaceApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns></returns>
        public void DeleteSubmodelElementByPath (string idShortPath)
        {
             DeleteSubmodelElementByPathWithHttpInfo(idShortPath);
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSubmodelElementByPathWithHttpInfo (string idShortPath)
        {
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->DeleteSubmodelElementByPath");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubmodelElementByPathAsync (string idShortPath)
        {
             await DeleteSubmodelElementByPathAsyncWithHttpInfo(idShortPath);

        }

        /// <summary>
        /// Deletes a submodel element at a specified path within the submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelElementByPathAsyncWithHttpInfo (string idShortPath)
        {
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->DeleteSubmodelElementByPath");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>List&lt;SubmodelElement&gt;</returns>
        public List<SubmodelElement> GetAllSubmodelElements (string level = null, string content = null, string extent = null)
        {
             ApiResponse<List<SubmodelElement>> localVarResponse = GetAllSubmodelElementsWithHttpInfo(level, content, extent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of List&lt;SubmodelElement&gt;</returns>
        public ApiResponse< List<SubmodelElement> > GetAllSubmodelElementsWithHttpInfo (string level = null, string content = null, string extent = null)
        {

            var localVarPath = "/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SubmodelElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SubmodelElement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SubmodelElement>)));
        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of List&lt;SubmodelElement&gt;</returns>
        public async System.Threading.Tasks.Task<List<SubmodelElement>> GetAllSubmodelElementsAsync (string level = null, string content = null, string extent = null)
        {
             ApiResponse<List<SubmodelElement>> localVarResponse = await GetAllSubmodelElementsAsyncWithHttpInfo(level, content, extent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all submodel elements including their hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SubmodelElement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SubmodelElement>>> GetAllSubmodelElementsAsyncWithHttpInfo (string level = null, string content = null, string extent = null)
        {

            var localVarPath = "/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SubmodelElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SubmodelElement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SubmodelElement>)));
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        public OperationResult GetOperationAsyncResult (string idShortPath, string handleId, string content = null)
        {
             ApiResponse<OperationResult> localVarResponse = GetOperationAsyncResultWithHttpInfo(idShortPath, handleId, content);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        public ApiResponse< OperationResult > GetOperationAsyncResultWithHttpInfo (string idShortPath, string handleId, string content = null)
        {
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->GetOperationAsyncResult");
            // verify the required parameter 'handleId' is set
            if (handleId == null)
                throw new ApiException(400, "Missing required parameter 'handleId' when calling SubmodelInterfaceApi->GetOperationAsyncResult");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (handleId != null) localVarPathParams.Add("handleId", this.Configuration.ApiClient.ParameterToString(handleId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperationAsyncResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        public async System.Threading.Tasks.Task<OperationResult> GetOperationAsyncResultAsync (string idShortPath, string handleId, string content = null)
        {
             ApiResponse<OperationResult> localVarResponse = await GetOperationAsyncResultAsyncWithHttpInfo(idShortPath, handleId, content);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Operation result of an asynchronous invoked Operation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="handleId">The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (BASE64-URL-encoded)</param>
        /// <param name="content"> (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResult>> GetOperationAsyncResultAsyncWithHttpInfo (string idShortPath, string handleId, string content = null)
        {
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->GetOperationAsyncResult");
            // verify the required parameter 'handleId' is set
            if (handleId == null)
                throw new ApiException(400, "Missing required parameter 'handleId' when calling SubmodelInterfaceApi->GetOperationAsyncResult");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (handleId != null) localVarPathParams.Add("handleId", this.Configuration.ApiClient.ParameterToString(handleId)); // path parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOperationAsyncResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Submodel</returns>
        public Submodel GetSubmodel (string level = null, string content = null, string extent = null)
        {
             ApiResponse<Submodel> localVarResponse = GetSubmodelWithHttpInfo(level, content, extent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Submodel</returns>
        public ApiResponse< Submodel > GetSubmodelWithHttpInfo (string level = null, string content = null, string extent = null)
        {

            var localVarPath = "/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submodel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Submodel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submodel)));
        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of Submodel</returns>
        public async System.Threading.Tasks.Task<Submodel> GetSubmodelAsync (string level = null, string content = null, string extent = null)
        {
             ApiResponse<Submodel> localVarResponse = await GetSubmodelAsyncWithHttpInfo(level, content, extent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (Submodel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Submodel>> GetSubmodelAsyncWithHttpInfo (string level = null, string content = null, string extent = null)
        {

            var localVarPath = "/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Submodel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Submodel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Submodel)));
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        public SubmodelElement GetSubmodelElementByPath (string idShortPath, string level = null, string content = null, string extent = null)
        {
             ApiResponse<SubmodelElement> localVarResponse = GetSubmodelElementByPathWithHttpInfo(idShortPath, level, content, extent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        public ApiResponse< SubmodelElement > GetSubmodelElementByPathWithHttpInfo (string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->GetSubmodelElementByPath");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        public async System.Threading.Tasks.Task<SubmodelElement> GetSubmodelElementByPathAsync (string idShortPath, string level = null, string content = null, string extent = null)
        {
             ApiResponse<SubmodelElement> localVarResponse = await GetSubmodelElementByPathAsyncWithHttpInfo(idShortPath, level, content, extent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a specific submodel element from the Submodel at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> GetSubmodelElementByPathAsyncWithHttpInfo (string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->GetSubmodelElementByPath");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>OperationResult</returns>
        public OperationResult InvokeOperation (OperationRequest body, string idShortPath, bool? async = null, string content = null)
        {
             ApiResponse<OperationResult> localVarResponse = InvokeOperationWithHttpInfo(body, idShortPath, async, content);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>ApiResponse of OperationResult</returns>
        public ApiResponse< OperationResult > InvokeOperationWithHttpInfo (OperationRequest body, string idShortPath, bool? async = null, string content = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmodelInterfaceApi->InvokeOperation");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->InvokeOperation");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}/invoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvokeOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of OperationResult</returns>
        public async System.Threading.Tasks.Task<OperationResult> InvokeOperationAsync (OperationRequest body, string idShortPath, bool? async = null, string content = null)
        {
             ApiResponse<OperationResult> localVarResponse = await InvokeOperationAsyncWithHttpInfo(body, idShortPath, async, content);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Synchronously or asynchronously invokes an Operation at a specified path 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Operation request object</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated), in this case an operation</param>
        /// <param name="async">Determines whether an operation invocation is performed asynchronously or synchronously (optional, default to false)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <returns>Task of ApiResponse (OperationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResult>> InvokeOperationAsyncWithHttpInfo (OperationRequest body, string idShortPath, bool? async = null, string content = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmodelInterfaceApi->InvokeOperation");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->InvokeOperation");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}/invoke";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (async != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "async", async)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvokeOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResult)));
        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        public SubmodelElement PostSubmodelElement (SubmodelElement body, string level = null, string content = null, string extent = null)
        {
             ApiResponse<SubmodelElement> localVarResponse = PostSubmodelElementWithHttpInfo(body, level, content, extent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        public ApiResponse< SubmodelElement > PostSubmodelElementWithHttpInfo (SubmodelElement body, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmodelInterfaceApi->PostSubmodelElement");

            var localVarPath = "/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        public async System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementAsync (SubmodelElement body, string level = null, string content = null, string extent = null)
        {
             ApiResponse<SubmodelElement> localVarResponse = await PostSubmodelElementAsyncWithHttpInfo(body, level, content, extent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new submodel element 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementAsyncWithHttpInfo (SubmodelElement body, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmodelInterfaceApi->PostSubmodelElement");

            var localVarPath = "/submodel/submodel-elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>SubmodelElement</returns>
        public SubmodelElement PostSubmodelElementByPath (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null)
        {
             ApiResponse<SubmodelElement> localVarResponse = PostSubmodelElementByPathWithHttpInfo(body, idShortPath, level, content, extent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of SubmodelElement</returns>
        public ApiResponse< SubmodelElement > PostSubmodelElementByPathWithHttpInfo (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmodelInterfaceApi->PostSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->PostSubmodelElementByPath");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of SubmodelElement</returns>
        public async System.Threading.Tasks.Task<SubmodelElement> PostSubmodelElementByPathAsync (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null)
        {
             ApiResponse<SubmodelElement> localVarResponse = await PostSubmodelElementByPathAsyncWithHttpInfo(body, idShortPath, level, content, extent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse (SubmodelElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelElement>> PostSubmodelElementByPathAsyncWithHttpInfo (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmodelInterfaceApi->PostSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->PostSubmodelElementByPath");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelElement)));
        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        public void PutSubmodel (Submodel body, string level = null, string content = null, string extent = null)
        {
             PutSubmodelWithHttpInfo(body, level, content, extent);
        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutSubmodelWithHttpInfo (Submodel body, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmodelInterfaceApi->PutSubmodel");

            var localVarPath = "/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutSubmodelAsync (Submodel body, string level = null, string content = null, string extent = null)
        {
             await PutSubmodelAsyncWithHttpInfo(body, level, content, extent);

        }

        /// <summary>
        /// Updates the Submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel object</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelAsyncWithHttpInfo (Submodel body, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmodelInterfaceApi->PutSubmodel");

            var localVarPath = "/submodel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns></returns>
        public void PutSubmodelElementByPath (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null)
        {
             PutSubmodelElementByPathWithHttpInfo(body, idShortPath, level, content, extent);
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutSubmodelElementByPathWithHttpInfo (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmodelInterfaceApi->PutSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->PutSubmodelElementByPath");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutSubmodelElementByPathAsync (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null)
        {
             await PutSubmodelElementByPathAsyncWithHttpInfo(body, idShortPath, level, content, extent);

        }

        /// <summary>
        /// Updates an existing submodel element at a specified path within submodel elements hierarchy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Requested submodel element</param>
        /// <param name="idShortPath">IdShort path to the submodel element (dot-separated)</param>
        /// <param name="level">Determines the structural depth of the respective resource content (optional, default to deep)</param>
        /// <param name="content">Determines the request or response kind of the resource (optional, default to normal)</param>
        /// <param name="extent">Determines to which extent the resource is being serialized (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelElementByPathAsyncWithHttpInfo (SubmodelElement body, string idShortPath, string level = null, string content = null, string extent = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubmodelInterfaceApi->PutSubmodelElementByPath");
            // verify the required parameter 'idShortPath' is set
            if (idShortPath == null)
                throw new ApiException(400, "Missing required parameter 'idShortPath' when calling SubmodelInterfaceApi->PutSubmodelElementByPath");

            var localVarPath = "/submodel/submodel-elements/{idShortPath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idShortPath != null) localVarPathParams.Add("idShortPath", this.Configuration.ApiClient.ParameterToString(idShortPath)); // path parameter
            if (level != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "level", level)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (extent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "extent", extent)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodelElementByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
