/* 
 * DotAAS Part 2 | HTTP/REST | Entire Interface Collection
 *
 * The entire interface collection as part of Details of the Asset Administration Shell Part 2
 *
 * OpenAPI spec version: V1.0RC01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAssetAdministrationShellRegistryInterfaceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void DeleteAssetAdministrationShellDescriptorById (string aasIdentifier);

        /// <summary>
        /// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssetAdministrationShellDescriptorByIdWithHttpInfo (string aasIdentifier);
        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void DeleteSubmodelDescriptorByIdAASRegistry (string aasIdentifier, string submodelIdentifier);

        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubmodelDescriptorByIdAASRegistryWithHttpInfo (string aasIdentifier, string submodelIdentifier);
        /// <summary>
        /// Returns all Asset Administration Shell Descriptors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AssetAdministrationShellDescriptor&gt;</returns>
        List<AssetAdministrationShellDescriptor> GetAllAssetAdministrationShellDescriptors ();

        /// <summary>
        /// Returns all Asset Administration Shell Descriptors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AssetAdministrationShellDescriptor&gt;</returns>
        ApiResponse<List<AssetAdministrationShellDescriptor>> GetAllAssetAdministrationShellDescriptorsWithHttpInfo ();
        /// <summary>
        /// Returns all Submodel Descriptors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>List&lt;SubmodelDescriptor&gt;</returns>
        List<SubmodelDescriptor> GetAllSubmodelDescriptorsAASRegistry (string aasIdentifier);

        /// <summary>
        /// Returns all Submodel Descriptors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of List&lt;SubmodelDescriptor&gt;</returns>
        ApiResponse<List<SubmodelDescriptor>> GetAllSubmodelDescriptorsAASRegistryWithHttpInfo (string aasIdentifier);
        /// <summary>
        /// Returns a specific Asset Administration Shell Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>AssetAdministrationShellDescriptor</returns>
        AssetAdministrationShellDescriptor GetAssetAdministrationShellDescriptorById (string aasIdentifier);

        /// <summary>
        /// Returns a specific Asset Administration Shell Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of AssetAdministrationShellDescriptor</returns>
        ApiResponse<AssetAdministrationShellDescriptor> GetAssetAdministrationShellDescriptorByIdWithHttpInfo (string aasIdentifier);
        /// <summary>
        /// Returns a specific Submodel Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>SubmodelDescriptor</returns>
        SubmodelDescriptor GetSubmodelDescriptorByIdAASRegistry (string aasIdentifier, string submodelIdentifier);

        /// <summary>
        /// Returns a specific Submodel Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of SubmodelDescriptor</returns>
        ApiResponse<SubmodelDescriptor> GetSubmodelDescriptorByIdAASRegistryWithHttpInfo (string aasIdentifier, string submodelIdentifier);
        /// <summary>
        /// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <returns>AssetAdministrationShellDescriptor</returns>
        AssetAdministrationShellDescriptor PostAssetAdministrationShellDescriptor (AssetAdministrationShellDescriptor body);

        /// <summary>
        /// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <returns>ApiResponse of AssetAdministrationShellDescriptor</returns>
        ApiResponse<AssetAdministrationShellDescriptor> PostAssetAdministrationShellDescriptorWithHttpInfo (AssetAdministrationShellDescriptor body);
        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>SubmodelDescriptor</returns>
        SubmodelDescriptor PostSubmodelDescriptorAASRegistry (SubmodelDescriptor body, string aasIdentifier);

        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of SubmodelDescriptor</returns>
        ApiResponse<SubmodelDescriptor> PostSubmodelDescriptorAASRegistryWithHttpInfo (SubmodelDescriptor body, string aasIdentifier);
        /// <summary>
        /// Updates an existing Asset Administration Shell Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void PutAssetAdministrationShellDescriptorById (AssetAdministrationShellDescriptor body, string aasIdentifier);

        /// <summary>
        /// Updates an existing Asset Administration Shell Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutAssetAdministrationShellDescriptorByIdWithHttpInfo (AssetAdministrationShellDescriptor body, string aasIdentifier);
        /// <summary>
        /// Updates an existing Submodel Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        void PutSubmodelDescriptorByIdAASRegistry (SubmodelDescriptor body, string aasIdentifier, string submodelIdentifier);

        /// <summary>
        /// Updates an existing Submodel Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutSubmodelDescriptorByIdAASRegistryWithHttpInfo (SubmodelDescriptor body, string aasIdentifier, string submodelIdentifier);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssetAdministrationShellDescriptorByIdAsync (string aasIdentifier);

        /// <summary>
        /// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetAdministrationShellDescriptorByIdAsyncWithHttpInfo (string aasIdentifier);
        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubmodelDescriptorByIdAASRegistryAsync (string aasIdentifier, string submodelIdentifier);

        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelDescriptorByIdAASRegistryAsyncWithHttpInfo (string aasIdentifier, string submodelIdentifier);
        /// <summary>
        /// Returns all Asset Administration Shell Descriptors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AssetAdministrationShellDescriptor&gt;</returns>
        System.Threading.Tasks.Task<List<AssetAdministrationShellDescriptor>> GetAllAssetAdministrationShellDescriptorsAsync ();

        /// <summary>
        /// Returns all Asset Administration Shell Descriptors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AssetAdministrationShellDescriptor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AssetAdministrationShellDescriptor>>> GetAllAssetAdministrationShellDescriptorsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns all Submodel Descriptors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of List&lt;SubmodelDescriptor&gt;</returns>
        System.Threading.Tasks.Task<List<SubmodelDescriptor>> GetAllSubmodelDescriptorsAASRegistryAsync (string aasIdentifier);

        /// <summary>
        /// Returns all Submodel Descriptors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (List&lt;SubmodelDescriptor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SubmodelDescriptor>>> GetAllSubmodelDescriptorsAASRegistryAsyncWithHttpInfo (string aasIdentifier);
        /// <summary>
        /// Returns a specific Asset Administration Shell Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of AssetAdministrationShellDescriptor</returns>
        System.Threading.Tasks.Task<AssetAdministrationShellDescriptor> GetAssetAdministrationShellDescriptorByIdAsync (string aasIdentifier);

        /// <summary>
        /// Returns a specific Asset Administration Shell Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShellDescriptor)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShellDescriptor>> GetAssetAdministrationShellDescriptorByIdAsyncWithHttpInfo (string aasIdentifier);
        /// <summary>
        /// Returns a specific Submodel Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of SubmodelDescriptor</returns>
        System.Threading.Tasks.Task<SubmodelDescriptor> GetSubmodelDescriptorByIdAASRegistryAsync (string aasIdentifier, string submodelIdentifier);

        /// <summary>
        /// Returns a specific Submodel Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (SubmodelDescriptor)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelDescriptor>> GetSubmodelDescriptorByIdAASRegistryAsyncWithHttpInfo (string aasIdentifier, string submodelIdentifier);
        /// <summary>
        /// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <returns>Task of AssetAdministrationShellDescriptor</returns>
        System.Threading.Tasks.Task<AssetAdministrationShellDescriptor> PostAssetAdministrationShellDescriptorAsync (AssetAdministrationShellDescriptor body);

        /// <summary>
        /// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShellDescriptor)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShellDescriptor>> PostAssetAdministrationShellDescriptorAsyncWithHttpInfo (AssetAdministrationShellDescriptor body);
        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of SubmodelDescriptor</returns>
        System.Threading.Tasks.Task<SubmodelDescriptor> PostSubmodelDescriptorAASRegistryAsync (SubmodelDescriptor body, string aasIdentifier);

        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (SubmodelDescriptor)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmodelDescriptor>> PostSubmodelDescriptorAASRegistryAsyncWithHttpInfo (SubmodelDescriptor body, string aasIdentifier);
        /// <summary>
        /// Updates an existing Asset Administration Shell Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutAssetAdministrationShellDescriptorByIdAsync (AssetAdministrationShellDescriptor body, string aasIdentifier);

        /// <summary>
        /// Updates an existing Asset Administration Shell Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetAdministrationShellDescriptorByIdAsyncWithHttpInfo (AssetAdministrationShellDescriptor body, string aasIdentifier);
        /// <summary>
        /// Updates an existing Submodel Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutSubmodelDescriptorByIdAASRegistryAsync (SubmodelDescriptor body, string aasIdentifier, string submodelIdentifier);

        /// <summary>
        /// Updates an existing Submodel Descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelDescriptorByIdAASRegistryAsyncWithHttpInfo (SubmodelDescriptor body, string aasIdentifier, string submodelIdentifier);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AssetAdministrationShellRegistryInterfaceApi : IAssetAdministrationShellRegistryInterfaceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellRegistryInterfaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetAdministrationShellRegistryInterfaceApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellRegistryInterfaceApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssetAdministrationShellRegistryInterfaceApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetAdministrationShellRegistryInterfaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetAdministrationShellRegistryInterfaceApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void DeleteAssetAdministrationShellDescriptorById (string aasIdentifier)
        {
             DeleteAssetAdministrationShellDescriptorByIdWithHttpInfo(aasIdentifier);
        }

        /// <summary>
        /// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAssetAdministrationShellDescriptorByIdWithHttpInfo (string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->DeleteAssetAdministrationShellDescriptorById");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssetAdministrationShellDescriptorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssetAdministrationShellDescriptorByIdAsync (string aasIdentifier)
        {
             await DeleteAssetAdministrationShellDescriptorByIdAsyncWithHttpInfo(aasIdentifier);

        }

        /// <summary>
        /// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetAdministrationShellDescriptorByIdAsyncWithHttpInfo (string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->DeleteAssetAdministrationShellDescriptorById");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssetAdministrationShellDescriptorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void DeleteSubmodelDescriptorByIdAASRegistry (string aasIdentifier, string submodelIdentifier)
        {
             DeleteSubmodelDescriptorByIdAASRegistryWithHttpInfo(aasIdentifier, submodelIdentifier);
        }

        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSubmodelDescriptorByIdAASRegistryWithHttpInfo (string aasIdentifier, string submodelIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->DeleteSubmodelDescriptorByIdAASRegistry");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->DeleteSubmodelDescriptorByIdAASRegistry");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelDescriptorByIdAASRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubmodelDescriptorByIdAASRegistryAsync (string aasIdentifier, string submodelIdentifier)
        {
             await DeleteSubmodelDescriptorByIdAASRegistryAsyncWithHttpInfo(aasIdentifier, submodelIdentifier);

        }

        /// <summary>
        /// Deletes a Submodel Descriptor, i.e. de-registers a submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubmodelDescriptorByIdAASRegistryAsyncWithHttpInfo (string aasIdentifier, string submodelIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->DeleteSubmodelDescriptorByIdAASRegistry");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->DeleteSubmodelDescriptorByIdAASRegistry");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubmodelDescriptorByIdAASRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns all Asset Administration Shell Descriptors 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AssetAdministrationShellDescriptor&gt;</returns>
        public List<AssetAdministrationShellDescriptor> GetAllAssetAdministrationShellDescriptors ()
        {
             ApiResponse<List<AssetAdministrationShellDescriptor>> localVarResponse = GetAllAssetAdministrationShellDescriptorsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Asset Administration Shell Descriptors 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AssetAdministrationShellDescriptor&gt;</returns>
        public ApiResponse< List<AssetAdministrationShellDescriptor> > GetAllAssetAdministrationShellDescriptorsWithHttpInfo ()
        {

            var localVarPath = "/registry/shell-descriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAssetAdministrationShellDescriptors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetAdministrationShellDescriptor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssetAdministrationShellDescriptor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetAdministrationShellDescriptor>)));
        }

        /// <summary>
        /// Returns all Asset Administration Shell Descriptors 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AssetAdministrationShellDescriptor&gt;</returns>
        public async System.Threading.Tasks.Task<List<AssetAdministrationShellDescriptor>> GetAllAssetAdministrationShellDescriptorsAsync ()
        {
             ApiResponse<List<AssetAdministrationShellDescriptor>> localVarResponse = await GetAllAssetAdministrationShellDescriptorsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all Asset Administration Shell Descriptors 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AssetAdministrationShellDescriptor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AssetAdministrationShellDescriptor>>> GetAllAssetAdministrationShellDescriptorsAsyncWithHttpInfo ()
        {

            var localVarPath = "/registry/shell-descriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAssetAdministrationShellDescriptors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AssetAdministrationShellDescriptor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AssetAdministrationShellDescriptor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AssetAdministrationShellDescriptor>)));
        }

        /// <summary>
        /// Returns all Submodel Descriptors 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>List&lt;SubmodelDescriptor&gt;</returns>
        public List<SubmodelDescriptor> GetAllSubmodelDescriptorsAASRegistry (string aasIdentifier)
        {
             ApiResponse<List<SubmodelDescriptor>> localVarResponse = GetAllSubmodelDescriptorsAASRegistryWithHttpInfo(aasIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all Submodel Descriptors 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of List&lt;SubmodelDescriptor&gt;</returns>
        public ApiResponse< List<SubmodelDescriptor> > GetAllSubmodelDescriptorsAASRegistryWithHttpInfo (string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->GetAllSubmodelDescriptorsAASRegistry");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelDescriptorsAASRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SubmodelDescriptor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SubmodelDescriptor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SubmodelDescriptor>)));
        }

        /// <summary>
        /// Returns all Submodel Descriptors 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of List&lt;SubmodelDescriptor&gt;</returns>
        public async System.Threading.Tasks.Task<List<SubmodelDescriptor>> GetAllSubmodelDescriptorsAASRegistryAsync (string aasIdentifier)
        {
             ApiResponse<List<SubmodelDescriptor>> localVarResponse = await GetAllSubmodelDescriptorsAASRegistryAsyncWithHttpInfo(aasIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all Submodel Descriptors 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (List&lt;SubmodelDescriptor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SubmodelDescriptor>>> GetAllSubmodelDescriptorsAASRegistryAsyncWithHttpInfo (string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->GetAllSubmodelDescriptorsAASRegistry");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubmodelDescriptorsAASRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SubmodelDescriptor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SubmodelDescriptor>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SubmodelDescriptor>)));
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>AssetAdministrationShellDescriptor</returns>
        public AssetAdministrationShellDescriptor GetAssetAdministrationShellDescriptorById (string aasIdentifier)
        {
             ApiResponse<AssetAdministrationShellDescriptor> localVarResponse = GetAssetAdministrationShellDescriptorByIdWithHttpInfo(aasIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of AssetAdministrationShellDescriptor</returns>
        public ApiResponse< AssetAdministrationShellDescriptor > GetAssetAdministrationShellDescriptorByIdWithHttpInfo (string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->GetAssetAdministrationShellDescriptorById");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetAdministrationShellDescriptorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetAdministrationShellDescriptor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShellDescriptor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShellDescriptor)));
        }

        /// <summary>
        /// Returns a specific Asset Administration Shell Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of AssetAdministrationShellDescriptor</returns>
        public async System.Threading.Tasks.Task<AssetAdministrationShellDescriptor> GetAssetAdministrationShellDescriptorByIdAsync (string aasIdentifier)
        {
             ApiResponse<AssetAdministrationShellDescriptor> localVarResponse = await GetAssetAdministrationShellDescriptorByIdAsyncWithHttpInfo(aasIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a specific Asset Administration Shell Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShellDescriptor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShellDescriptor>> GetAssetAdministrationShellDescriptorByIdAsyncWithHttpInfo (string aasIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->GetAssetAdministrationShellDescriptorById");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssetAdministrationShellDescriptorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetAdministrationShellDescriptor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShellDescriptor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShellDescriptor)));
        }

        /// <summary>
        /// Returns a specific Submodel Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>SubmodelDescriptor</returns>
        public SubmodelDescriptor GetSubmodelDescriptorByIdAASRegistry (string aasIdentifier, string submodelIdentifier)
        {
             ApiResponse<SubmodelDescriptor> localVarResponse = GetSubmodelDescriptorByIdAASRegistryWithHttpInfo(aasIdentifier, submodelIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a specific Submodel Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of SubmodelDescriptor</returns>
        public ApiResponse< SubmodelDescriptor > GetSubmodelDescriptorByIdAASRegistryWithHttpInfo (string aasIdentifier, string submodelIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->GetSubmodelDescriptorByIdAASRegistry");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->GetSubmodelDescriptorByIdAASRegistry");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodelDescriptorByIdAASRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelDescriptor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelDescriptor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelDescriptor)));
        }

        /// <summary>
        /// Returns a specific Submodel Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of SubmodelDescriptor</returns>
        public async System.Threading.Tasks.Task<SubmodelDescriptor> GetSubmodelDescriptorByIdAASRegistryAsync (string aasIdentifier, string submodelIdentifier)
        {
             ApiResponse<SubmodelDescriptor> localVarResponse = await GetSubmodelDescriptorByIdAASRegistryAsyncWithHttpInfo(aasIdentifier, submodelIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a specific Submodel Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (SubmodelDescriptor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelDescriptor>> GetSubmodelDescriptorByIdAASRegistryAsyncWithHttpInfo (string aasIdentifier, string submodelIdentifier)
        {
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->GetSubmodelDescriptorByIdAASRegistry");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->GetSubmodelDescriptorByIdAASRegistry");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmodelDescriptorByIdAASRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelDescriptor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelDescriptor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelDescriptor)));
        }

        /// <summary>
        /// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <returns>AssetAdministrationShellDescriptor</returns>
        public AssetAdministrationShellDescriptor PostAssetAdministrationShellDescriptor (AssetAdministrationShellDescriptor body)
        {
             ApiResponse<AssetAdministrationShellDescriptor> localVarResponse = PostAssetAdministrationShellDescriptorWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <returns>ApiResponse of AssetAdministrationShellDescriptor</returns>
        public ApiResponse< AssetAdministrationShellDescriptor > PostAssetAdministrationShellDescriptorWithHttpInfo (AssetAdministrationShellDescriptor body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRegistryInterfaceApi->PostAssetAdministrationShellDescriptor");

            var localVarPath = "/registry/shell-descriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAssetAdministrationShellDescriptor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetAdministrationShellDescriptor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShellDescriptor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShellDescriptor)));
        }

        /// <summary>
        /// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <returns>Task of AssetAdministrationShellDescriptor</returns>
        public async System.Threading.Tasks.Task<AssetAdministrationShellDescriptor> PostAssetAdministrationShellDescriptorAsync (AssetAdministrationShellDescriptor body)
        {
             ApiResponse<AssetAdministrationShellDescriptor> localVarResponse = await PostAssetAdministrationShellDescriptorAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <returns>Task of ApiResponse (AssetAdministrationShellDescriptor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetAdministrationShellDescriptor>> PostAssetAdministrationShellDescriptorAsyncWithHttpInfo (AssetAdministrationShellDescriptor body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRegistryInterfaceApi->PostAssetAdministrationShellDescriptor");

            var localVarPath = "/registry/shell-descriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAssetAdministrationShellDescriptor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetAdministrationShellDescriptor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetAdministrationShellDescriptor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetAdministrationShellDescriptor)));
        }

        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>SubmodelDescriptor</returns>
        public SubmodelDescriptor PostSubmodelDescriptorAASRegistry (SubmodelDescriptor body, string aasIdentifier)
        {
             ApiResponse<SubmodelDescriptor> localVarResponse = PostSubmodelDescriptorAASRegistryWithHttpInfo(body, aasIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of SubmodelDescriptor</returns>
        public ApiResponse< SubmodelDescriptor > PostSubmodelDescriptorAASRegistryWithHttpInfo (SubmodelDescriptor body, string aasIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRegistryInterfaceApi->PostSubmodelDescriptorAASRegistry");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->PostSubmodelDescriptorAASRegistry");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelDescriptorAASRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelDescriptor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelDescriptor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelDescriptor)));
        }

        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of SubmodelDescriptor</returns>
        public async System.Threading.Tasks.Task<SubmodelDescriptor> PostSubmodelDescriptorAASRegistryAsync (SubmodelDescriptor body, string aasIdentifier)
        {
             ApiResponse<SubmodelDescriptor> localVarResponse = await PostSubmodelDescriptorAASRegistryAsyncWithHttpInfo(body, aasIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Submodel Descriptor, i.e. registers a submodel 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse (SubmodelDescriptor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmodelDescriptor>> PostSubmodelDescriptorAASRegistryAsyncWithHttpInfo (SubmodelDescriptor body, string aasIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRegistryInterfaceApi->PostSubmodelDescriptorAASRegistry");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->PostSubmodelDescriptorAASRegistry");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSubmodelDescriptorAASRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmodelDescriptor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmodelDescriptor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmodelDescriptor)));
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void PutAssetAdministrationShellDescriptorById (AssetAdministrationShellDescriptor body, string aasIdentifier)
        {
             PutAssetAdministrationShellDescriptorByIdWithHttpInfo(body, aasIdentifier);
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutAssetAdministrationShellDescriptorByIdWithHttpInfo (AssetAdministrationShellDescriptor body, string aasIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRegistryInterfaceApi->PutAssetAdministrationShellDescriptorById");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->PutAssetAdministrationShellDescriptorById");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetAdministrationShellDescriptorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing Asset Administration Shell Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutAssetAdministrationShellDescriptorByIdAsync (AssetAdministrationShellDescriptor body, string aasIdentifier)
        {
             await PutAssetAdministrationShellDescriptorByIdAsyncWithHttpInfo(body, aasIdentifier);

        }

        /// <summary>
        /// Updates an existing Asset Administration Shell Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Asset Administration Shell Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutAssetAdministrationShellDescriptorByIdAsyncWithHttpInfo (AssetAdministrationShellDescriptor body, string aasIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRegistryInterfaceApi->PutAssetAdministrationShellDescriptorById");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->PutAssetAdministrationShellDescriptorById");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssetAdministrationShellDescriptorById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing Submodel Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns></returns>
        public void PutSubmodelDescriptorByIdAASRegistry (SubmodelDescriptor body, string aasIdentifier, string submodelIdentifier)
        {
             PutSubmodelDescriptorByIdAASRegistryWithHttpInfo(body, aasIdentifier, submodelIdentifier);
        }

        /// <summary>
        /// Updates an existing Submodel Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutSubmodelDescriptorByIdAASRegistryWithHttpInfo (SubmodelDescriptor body, string aasIdentifier, string submodelIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRegistryInterfaceApi->PutSubmodelDescriptorByIdAASRegistry");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->PutSubmodelDescriptorByIdAASRegistry");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->PutSubmodelDescriptorByIdAASRegistry");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodelDescriptorByIdAASRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates an existing Submodel Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutSubmodelDescriptorByIdAASRegistryAsync (SubmodelDescriptor body, string aasIdentifier, string submodelIdentifier)
        {
             await PutSubmodelDescriptorByIdAASRegistryAsyncWithHttpInfo(body, aasIdentifier, submodelIdentifier);

        }

        /// <summary>
        /// Updates an existing Submodel Descriptor 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Submodel Descriptor object</param>
        /// <param name="aasIdentifier">The Asset Administration Shell’s unique id (BASE64-URL-encoded)</param>
        /// <param name="submodelIdentifier">The Submodel’s unique id (BASE64-URL-encoded)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutSubmodelDescriptorByIdAASRegistryAsyncWithHttpInfo (SubmodelDescriptor body, string aasIdentifier, string submodelIdentifier)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssetAdministrationShellRegistryInterfaceApi->PutSubmodelDescriptorByIdAASRegistry");
            // verify the required parameter 'aasIdentifier' is set
            if (aasIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'aasIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->PutSubmodelDescriptorByIdAASRegistry");
            // verify the required parameter 'submodelIdentifier' is set
            if (submodelIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'submodelIdentifier' when calling AssetAdministrationShellRegistryInterfaceApi->PutSubmodelDescriptorByIdAASRegistry");

            var localVarPath = "/registry/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aasIdentifier != null) localVarPathParams.Add("aasIdentifier", this.Configuration.ApiClient.ParameterToString(aasIdentifier)); // path parameter
            if (submodelIdentifier != null) localVarPathParams.Add("submodelIdentifier", this.Configuration.ApiClient.ParameterToString(submodelIdentifier)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutSubmodelDescriptorByIdAASRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
